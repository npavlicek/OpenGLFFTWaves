#version 460 core

#define PI 3.1415926535897932384626433

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, rgba32f) uniform image2D spectrum;
layout(binding = 1, rgba32f) uniform image2D randomData;

layout(location = 0) uniform int patchSize;
layout(location = 1) uniform float in_WindSpeed;
layout(location = 2) uniform float in_Fetch;
layout(location = 3) uniform float in_Depth;

layout(location = 4) uniform float in_CutoffLow;
layout(location = 5) uniform float in_CutoffHigh;

float NormalizationFactor(float s) {
    float s2 = s * s;
    float s3 = s2 * s;
    float s4 = s3 * s;
    if (s < 5) return -0.000564f * s4 + 0.00776f * s3 - 0.044f * s2 + 0.192f * s + 0.163f;
    else return -4.80e-08f * s4 + 1.07e-05f * s3 - 9.53e-04f * s2 + 5.90e-02f * s + 3.93e-01f;
}

float Cosine2s(float theta, float s) {
	return NormalizationFactor(s) * pow(abs(cos(0.5f * theta)), 2.0f * s);
}

float SpreadPower(float omega, float peakOmega) {
	if (omega > peakOmega)
		return 9.77f * pow(abs(omega / peakOmega), -2.5f);
	else
		return 6.97f * pow(abs(omega / peakOmega), 5.0f);
}

float DirectionSpectrum(float theta, float omega, float spread_blend, float swell, float peak_omega, float angle) {
	float s = SpreadPower(omega, peak_omega) + 16 * tanh(min(omega / peak_omega, 20)) * swell * swell;
	return mix(2.0f / 3.1415f * cos(theta) * cos(theta), Cosine2s(theta - angle, s), spread_blend);
}

float dispersion(float wavelength) {
	return sqrt(wavelength * 9.81);
}

float dispersiond(float wavelength) {
	return 9.81 / (2 * sqrt(9.81 * wavelength));
}

float tma(float omega, float height) {
	float omega_h = omega * sqrt(height / 9.81);
	if (omega_h > 1) {
		return 1.0-(pow(2.0-omega_h, 2)/2.0);
	} else {
		return pow(omega_h, 2.0)/2.0;
	}
}

float donelanBanner(float omega, float omega_p, float theta) {
	float ratio = omega / omega_p;
	float Bs = 0.0;
	if (ratio < 0.95) {
		Bs = 2.61 * pow(ratio, 1.3);
	} else if (ratio < 1.6) {
		Bs = 2.28 * pow(ratio, -1.3);
	} else {
		float e = -0.4 + 0.8393 * exp(-0.567 * log(pow(ratio, 2)));
		Bs = pow(10.0, e);
	}

	return Bs / (2.0 * tanh(Bs * PI) * pow(cosh(Bs * theta), 2));
}

float jonswap(float omega, float omega_p, float grav, float grav_sqrd, float fetch, float windspeed) {
	float alpha = 0.076 * pow(pow(windspeed, 2) / (fetch * grav), 0.22);
	float firstTerm = alpha * grav_sqrd / pow(omega, 5);
	float sigma = omega > omega_p ? 0.09 : 0.07;
	float r = exp(-(pow(omega - omega_p, 2)/(2*pow(sigma, 2)*pow(omega_p, 2))));
	float gamma = 3.3;
	return firstTerm * exp((-5.0 / 4.0) * pow(omega_p / omega, 4)) * pow(gamma, r);
}

float spec(float omega, float windspeed, float fetch, float height, float theta) {
	float grav = 9.81;
	float grav_sqrd = grav * grav;
	float omega_p = 22.0 * (grav_sqrd / (windspeed * fetch));
	float jonswp = jonswap(omega, omega_p, grav, grav_sqrd, fetch, windspeed);
	float tmaspec = tma(omega, height);
	float swell = donelanBanner(omega, omega_p, theta);
	return jonswp * tmaspec * swell * DirectionSpectrum(theta, omega, 1.0, 0.5, omega_p, 3.14/2.0);
}

void main() {
	float dx = 2.0 * PI / patchSize;
	vec2 wavevector = vec2(gl_GlobalInvocationID.xy);
	wavevector -= imageSize(spectrum) / 2.0;
	wavevector *= dx; 

	float wavelength = length(wavevector);

	if (wavelength >= in_CutoffLow && wavelength < in_CutoffHigh) {
		// angular freq
		float omega = dispersion(wavelength);
		float omegad = dispersiond(wavelength);
		if (omega < 0.00001) omega = 0.00001;
		if (omegad < 0.00001) omegad = 0.00001;

		float s = spec(omega, in_WindSpeed, in_Fetch, in_Depth, atan(wavevector.y, wavevector.x)) * omegad / wavelength;

		vec4 rd = imageLoad(randomData, ivec2(gl_GlobalInvocationID.xy));

		vec4 res = rd * sqrt(2 * s * dx * dx);

		imageStore(spectrum, ivec2(gl_GlobalInvocationID.xy), res); 
	} else {
		imageStore(spectrum, ivec2(gl_GlobalInvocationID.xy), vec4(0));
	}
}
